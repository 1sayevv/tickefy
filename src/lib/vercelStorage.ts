// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Vercel Storage

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Vercel Blob Storage
export const uploadImageToVercel = async (file: File): Promise<string> => {
  try {
    const formData = new FormData()
    formData.append('file', file)

    console.log('üì§ Sending request to /api/upload-image')
    const response = await fetch('/api/upload-image', {
      method: 'POST',
      body: formData
    })

    console.log('üì• Response status:', response.status)

    if (!response.ok) {
      let errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
      try {
        const errorData = await response.json()
        errorMessage = errorData.error || errorMessage
      } catch (parseError) {
        console.log('Could not parse error response:', parseError)
        // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è —á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–≤–∞–∂–¥—ã
        errorMessage = `HTTP ${response.status}: Server Error`
      }
      throw new Error(errorMessage)
    }

    const result = await response.json()
    console.log('‚úÖ Upload successful, URL:', result.url)
    return result.url

  } catch (error) {
    console.error('‚ùå Error uploading image to Vercel:', error)
    throw error
  }
}

// localStorage –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ KV)
const TICKETS_STORAGE_KEY = 'tickefy_tickets'

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∏–∫–µ—Ç—ã –∏–∑ localStorage
export const getTicketsFromStorage = async (): Promise<any[]> => {
  try {
    const stored = localStorage.getItem(TICKETS_STORAGE_KEY)
    if (stored) {
      const tickets = JSON.parse(stored)
      console.log('üì¶ Retrieved tickets from localStorage:', tickets.length)
      return tickets
    }
    console.log('üì¶ No tickets found in localStorage')
    return []
  } catch (error) {
    console.error('‚ùå Error reading tickets from localStorage:', error)
    return []
  }
}

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç –≤ localStorage
export const createTicketInStorage = async (ticketData: {
  title: string
  description: string
  image_url?: string
  user_id: string
  company: string
  user_email?: string
}): Promise<any> => {
  try {
    const stored = localStorage.getItem(TICKETS_STORAGE_KEY)
    const tickets = stored ? JSON.parse(stored) : []

    const newTicket = {
      id: Date.now().toString(),
      title: ticketData.title,
      description: ticketData.description,
      image_url: ticketData.image_url,
      user_id: ticketData.user_id,
      user_email: ticketData.user_email || 'unknown@example.com',
      company: ticketData.company,
      status: 'open',
      created_at: new Date().toISOString()
    }

    tickets.push(newTicket)
    localStorage.setItem(TICKETS_STORAGE_KEY, JSON.stringify(tickets))

    return newTicket

  } catch (error) {
    console.error('Error creating ticket in storage:', error)
    throw error
  }
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –≤ localStorage
export const updateTicketStatusInStorage = async (id: string, status: string): Promise<any> => {
  try {
    const stored = localStorage.getItem(TICKETS_STORAGE_KEY)
    const tickets = stored ? JSON.parse(stored) : []

    const ticketIndex = tickets.findIndex((ticket: any) => ticket.id === id)
    
    if (ticketIndex === -1) {
      throw new Error('–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }

    tickets[ticketIndex].status = status
    localStorage.setItem(TICKETS_STORAGE_KEY, JSON.stringify(tickets))

    return tickets[ticketIndex]

  } catch (error) {
    console.error('Error updating ticket status in storage:', error)
    throw error
  }
}

// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–∏–∫–µ—Ç—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
export const clearTicketsStorage = () => {
  try {
    localStorage.removeItem(TICKETS_STORAGE_KEY)
    console.log('üóëÔ∏è Cleared tickets from localStorage')
  } catch (error) {
    console.error('‚ùå Error clearing tickets from localStorage:', error)
  }
}

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤
export const debugTicketsStorage = () => {
  try {
    const stored = localStorage.getItem(TICKETS_STORAGE_KEY)
    if (stored) {
      const tickets = JSON.parse(stored)
      console.log('üîç Debug: All tickets in localStorage:', tickets)
      console.log('üîç Debug: Tickets count:', tickets.length)
      tickets.forEach((ticket: any, index: number) => {
        console.log(`üîç Debug: Ticket ${index + 1}:`, {
          id: ticket.id,
          title: ticket.title,
          company: ticket.company,
          user_email: ticket.user_email,
          status: ticket.status,
          created_at: ticket.created_at
        })
      })
      return tickets
    } else {
      console.log('üîç Debug: No tickets found in localStorage')
      return []
    }
  } catch (error) {
    console.error('‚ùå Error debugging tickets from localStorage:', error)
    return []
  }
} 