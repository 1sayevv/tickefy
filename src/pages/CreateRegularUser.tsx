import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { useTranslation } from 'react-i18next'
import { useAuth } from '@/contexts/AuthContext'
import { saveRegularUserToStorage, getRegularUsersByCompany } from '@/lib/localStorage'
import MainLayout from '@/layouts/MainLayout'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'


export default function CreateRegularUser() {
  const { t } = useTranslation()
  const navigate = useNavigate()
  const { user } = useAuth()
  
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phoneNumber: '',
    position: '',
    username: '',
    password: ''
  })
  
  const [loading, setLoading] = useState(false)

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é —Ç–µ–∫—É—â–µ–≥–æ customer
  const getCurrentCompany = () => {
    if (user?.user_metadata?.role === 'customer') {
      return user.user_metadata.company || ''
    }
    return ''
  }

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const validateForm = () => {
    const errors: string[] = []
    
    if (!formData.firstName.trim()) errors.push('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
    if (!formData.lastName.trim()) errors.push('–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞')
    if (!formData.email.trim()) errors.push('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    if (!formData.phoneNumber.trim()) errors.push('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    if (!formData.position.trim()) errors.push('–î–æ–ª–∂–Ω–æ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞')
    if (!formData.username.trim()) errors.push('Username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    if (!formData.password.trim()) errors.push('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (formData.email && !emailRegex.test(formData.email)) {
      errors.push('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email')
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã username –∏ password
    if (formData.username.length < 3) {
      errors.push('Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞')
    }
    if (formData.password.length < 6) {
      errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email
    const existingUsers = getRegularUsersByCompany(getCurrentCompany())
    const isEmailExists = existingUsers.some(user => user.email === formData.email)
    if (isEmailExists) {
      errors.push('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username
    const isUsernameExists = existingUsers.some(user => user.username === formData.username)
    if (isUsernameExists) {
      errors.push('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    }
    
    return errors
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)

    try {
      console.log('üîç Creating regular user with data:', formData)
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
      const errors = validateForm()
      if (errors.length > 0) {
        errors.forEach(error => alert(error))
        setLoading(false)
        return
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ customer
      const currentCompany = getCurrentCompany()
      const currentCustomerId = user?.id || localStorage.getItem('currentCustomerId')
      
      if (!currentCompany || !currentCustomerId) {
        alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é')
        setLoading(false)
        return
      }

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userData = {
        firstName: formData.firstName.trim(),
        lastName: formData.lastName.trim(),
        email: formData.email.trim(),
        phoneNumber: formData.phoneNumber.trim(),
        position: formData.position.trim(),
        username: formData.username.trim(),
        password: formData.password.trim(),
        companyName: currentCompany,
        createdBy: currentCustomerId,
        status: 'active' as const
      }

      console.log('üîç Saving regular user:', userData)
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      const savedUser = saveRegularUserToStorage(userData)
      
      console.log('‚úÖ Regular user created successfully:', savedUser)
      
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setFormData({
        firstName: '',
        lastName: '',
        email: '',
        phoneNumber: '',
        position: '',
        username: '',
        password: ''
      })
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      navigate('/users')
      
    } catch (error) {
      console.error('‚ùå Error creating regular user:', error)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    } finally {
      setLoading(false)
    }
  }

  const positions = [
    '–ú–µ–Ω–µ–¥–∂–µ—Ä',
    '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
    '–î–∏–∑–∞–π–Ω–µ—Ä',
    '–ê–Ω–∞–ª–∏—Ç–∏–∫',
    '–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫',
    '–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥',
    '–ü—Ä–æ–¥–∞–≤–µ—Ü',
    '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä',
    'HR',
    '–î—Ä—É–≥–æ–µ'
  ]

  return (
    <MainLayout>
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="mb-6">
          <h1 className="text-2xl sm:text-3xl font-bold tracking-tight">
            –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          </h1>
          <p className="text-muted-foreground mt-2">
            –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</CardTitle>
            </CardHeader>
            <CardContent>
            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label htmlFor="firstName" className="block text-sm font-medium">–ò–º—è *</label>
                  <input
                    id="firstName"
                    type="text"
                    value={formData.firstName}
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleInputChange('firstName', e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
                    required
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                
                <div className="space-y-2">
                  <label htmlFor="lastName" className="block text-sm font-medium">–§–∞–º–∏–ª–∏—è *</label>
                  <input
                    id="lastName"
                    type="text"
                    value={formData.lastName}
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleInputChange('lastName', e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
                    required
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <label htmlFor="email" className="block text-sm font-medium">Email *</label>
                <input
                  id="email"
                  type="email"
                  value={formData.email}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleInputChange('email', e.target.value)}
                  placeholder="user@company.com"
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div className="space-y-2">
                <label htmlFor="phoneNumber" className="block text-sm font-medium">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ *</label>
                <input
                  id="phoneNumber"
                  type="text"
                  value={formData.phoneNumber}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleInputChange('phoneNumber', e.target.value)}
                  placeholder="+7 (999) 123-45-67"
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div className="space-y-2">
                <label htmlFor="position" className="block text-sm font-medium">–î–æ–ª–∂–Ω–æ—Å—Ç—å *</label>
                <select
                  id="position"
                  value={formData.position}
                  onChange={(e: React.ChangeEvent<HTMLSelectElement>) => handleInputChange('position', e.target.value)}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å</option>
                  {positions.map((position) => (
                    <option key={position} value={position}>
                      {position}
                    </option>
                  ))}
                </select>
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label htmlFor="username" className="block text-sm font-medium">Username *</label>
                  <input
                    id="username"
                    type="text"
                    value={formData.username}
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleInputChange('username', e.target.value)}
                    placeholder="ivan_petrov"
                    required
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                  <p className="text-xs text-gray-500">–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞</p>
                </div>
                
                <div className="space-y-2">
                  <label htmlFor="password" className="block text-sm font-medium">–ü–∞—Ä–æ–ª—å *</label>
                  <input
                    id="password"
                    type="password"
                    value={formData.password}
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleInputChange('password', e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                    required
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                  <p className="text-xs text-gray-500">–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤</p>
                </div>
              </div>
            </form>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="space-y-2">
                <label className="block text-sm font-medium">–ö–æ–º–ø–∞–Ω–∏—è</label>
                <input
                  type="text"
                  value={getCurrentCompany()}
                  disabled
                  className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50"
                />
                <p className="text-sm text-gray-600">
                  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {getCurrentCompany()}
                </p>
              </div>

              <div className="space-y-2">
                <label className="block text-sm font-medium">–°–æ–∑–¥–∞–Ω</label>
                <input
                  type="text"
                  value={new Date().toLocaleDateString()}
                  disabled
                  className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50"
                />
                <p className="text-sm text-gray-600">
                  –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {new Date().toLocaleDateString()}
                </p>
              </div>

              <div className="flex justify-end space-x-4 pt-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => navigate('/users')}
                  disabled={loading}
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button 
                  type="submit" 
                  disabled={loading}
                  onClick={handleSubmit}
                >
                  {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
        </div>
      </div>
    </MainLayout>
  )
} 