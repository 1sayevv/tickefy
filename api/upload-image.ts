import { put } from '@vercel/blob'
import { NextRequest, NextResponse } from 'next/server'

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Blob Storage
const isBlobStorageAvailable = () => {
  return process.env.BLOB_READ_WRITE_TOKEN
}

export async function POST(request: NextRequest) {
  try {
    console.log('üì§ API upload-image called')
    console.log('üîß Environment check:', {
      hasBlobToken: !!process.env.BLOB_READ_WRITE_TOKEN,
      tokenLength: process.env.BLOB_READ_WRITE_TOKEN?.length || 0
    })
    
    const formData = await request.formData()
    const file = formData.get('file') as File
    
    console.log('üìÅ File received:', {
      name: file?.name,
      type: file?.type,
      size: file?.size,
      exists: !!file
    })
    
    if (!file) {
      console.log('‚ùå No file found in request')
      return NextResponse.json(
        { error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!file.type.startsWith('image/')) {
      console.log('‚ùå Invalid file type:', file.type)
      return NextResponse.json(
        { error: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    if (file.size > 5 * 1024 * 1024) {
      console.log('‚ùå File too large:', file.size)
      return NextResponse.json(
        { error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB' },
        { status: 400 }
      )
    }

    console.log('‚úÖ File validation passed')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Blob Storage
    if (!isBlobStorageAvailable()) {
      console.log('‚ùå Blob Storage not available - missing BLOB_READ_WRITE_TOKEN')
      return NextResponse.json(
        { error: 'Blob Storage –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BLOB_READ_WRITE_TOKEN' },
        { status: 500 }
      )
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const timestamp = Date.now()
    const fileName = `tickets/${timestamp}-${file.name}`
    console.log('üìù File name:', fileName)

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Vercel Blob Storage
      console.log('üöÄ Uploading to Vercel Blob Storage...')
      const blob = await put(fileName, file, {
        access: 'public',
        addRandomSuffix: false
      })

      console.log('‚úÖ Upload successful:', blob.url)

      return NextResponse.json({
        url: blob.url,
        success: true
      })
    } catch (error) {
      console.error('‚ùå Blob upload error:', error)
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Blob Storage: ' + (error as Error).message },
        { status: 500 }
      )
    }

  } catch (error) {
    console.error('‚ùå Error uploading file:', error)
    console.error('‚ùå Error details:', {
      message: (error as Error).message,
      stack: (error as Error).stack
    })
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + (error as Error).message },
      { status: 500 }
    )
  }
} 