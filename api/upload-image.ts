import { put } from '@vercel/blob'
import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    console.log('üì§ API upload-image called')
    
    const formData = await request.formData()
    const file = formData.get('file') as File
    
    console.log('üìÅ File received:', {
      name: file?.name,
      type: file?.type,
      size: file?.size,
      exists: !!file
    })
    
    if (!file) {
      console.log('‚ùå No file found in request')
      return NextResponse.json(
        { error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!file.type.startsWith('image/')) {
      console.log('‚ùå Invalid file type:', file.type)
      return NextResponse.json(
        { error: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    if (file.size > 5 * 1024 * 1024) {
      console.log('‚ùå File too large:', file.size)
      return NextResponse.json(
        { error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB' },
        { status: 400 }
      )
    }

    console.log('‚úÖ File validation passed')

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const timestamp = Date.now()
    const fileName = `tickets/${timestamp}-${file.name}`
    console.log('üìù File name:', fileName)

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Vercel Blob Storage
    console.log('üöÄ Uploading to Vercel Blob Storage...')
    const blob = await put(fileName, file, {
      access: 'public',
      addRandomSuffix: false
    })

    console.log('‚úÖ Upload successful:', blob.url)

    return NextResponse.json({
      url: blob.url,
      success: true
    })

  } catch (error) {
    console.error('Error uploading file:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞' },
      { status: 500 }
    )
  }
} 